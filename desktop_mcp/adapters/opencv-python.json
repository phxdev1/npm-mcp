{
  "package": "opencv-python",
  "import_type": "python",
  "description": "Computer vision for screen automation and image recognition",
  "capabilities": ["computer_vision", "image_recognition"],
  "setup": [
    "import cv2",
    "import numpy as np",
    "import pyautogui",
    "import base64"
  ],
  "methods": {
    "find_image_on_screen": {
      "description": "Find a template image on the current screen",
      "parameters": ["template_path", "confidence?=0.8", "region?"],
      "code": [
        "template_path = params.get('template_path')",
        "confidence = params.get('confidence', 0.8)",
        "region = params.get('region')",
        "if not os.path.exists(template_path):",
        "    result = {'found': False, 'error': 'Template image not found'}",
        "    return result",
        "screenshot = pyautogui.screenshot(region=region) if region else pyautogui.screenshot()",
        "screenshot_np = np.array(screenshot)",
        "screenshot_gray = cv2.cvtColor(screenshot_np, cv2.COLOR_RGB2GRAY)",
        "template = cv2.imread(template_path, cv2.IMREAD_GRAYSCALE)",
        "if template is None:",
        "    result = {'found': False, 'error': 'Could not load template image'}",
        "    return result",
        "res = cv2.matchTemplate(screenshot_gray, template, cv2.TM_CCOEFF_NORMED)",
        "min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)",
        "if max_val >= confidence:",
        "    h, w = template.shape",
        "    x, y = max_loc",
        "    if region:",
        "        x += region[0]",
        "        y += region[1]",
        "    center_x = x + w // 2",
        "    center_y = y + h // 2",
        "    result = {",
        "        'found': True,",
        "        'confidence': float(max_val),",
        "        'location': {'x': x, 'y': y, 'width': w, 'height': h},",
        "        'center': {'x': center_x, 'y': center_y}",
        "    }",
        "else:",
        "    result = {'found': False, 'confidence': float(max_val)}",
        "return result"
      ]
    },
    "click_image": {
      "description": "Click on a template image found on screen",
      "parameters": ["template_path", "confidence?=0.8", "offset_x?=0", "offset_y?=0"],
      "code": [
        "template_path = params.get('template_path')",
        "confidence = params.get('confidence', 0.8)",
        "offset_x = params.get('offset_x', 0)",
        "offset_y = params.get('offset_y', 0)",
        "find_result = find_image_on_screen({'template_path': template_path, 'confidence': confidence})",
        "if find_result['found']:",
        "    center = find_result['center']",
        "    click_x = center['x'] + offset_x",
        "    click_y = center['y'] + offset_y",
        "    pyautogui.click(click_x, click_y)",
        "    result = {",
        "        'success': True,",
        "        'clicked_at': {'x': click_x, 'y': click_y},",
        "        'confidence': find_result['confidence']",
        "    }",
        "else:",
        "    result = {'success': False, 'error': 'Template image not found on screen'}",
        "return result"
      ]
    },
    "wait_for_image": {
      "description": "Wait for a template image to appear on screen",
      "parameters": ["template_path", "timeout?=30", "confidence?=0.8", "check_interval?=1"],
      "code": [
        "import time",
        "template_path = params.get('template_path')",
        "timeout = params.get('timeout', 30)",
        "confidence = params.get('confidence', 0.8)",
        "check_interval = params.get('check_interval', 1)",
        "start_time = time.time()",
        "while time.time() - start_time < timeout:",
        "    find_result = find_image_on_screen({'template_path': template_path, 'confidence': confidence})",
        "    if find_result['found']:",
        "        result = {",
        "            'found': True,",
        "            'wait_time': time.time() - start_time,",
        "            'location': find_result['location'],",
        "            'confidence': find_result['confidence']",
        "        }",
        "        return result",
        "    time.sleep(check_interval)",
        "result = {'found': False, 'timeout': True, 'wait_time': timeout}",
        "return result"
      ]
    },
    "get_pixel_color": {
      "description": "Get the RGB color of a pixel at specific coordinates",
      "parameters": ["x", "y"],
      "code": [
        "x = params.get('x')",
        "y = params.get('y')",
        "screenshot = pyautogui.screenshot()",
        "pixel = screenshot.getpixel((x, y))",
        "result = {",
        "    'x': x,",
        "    'y': y,",
        "    'color': {'r': pixel[0], 'g': pixel[1], 'b': pixel[2]},",
        "    'hex': f'#{pixel[0]:02x}{pixel[1]:02x}{pixel[2]:02x}'",
        "}",
        "return result"
      ]
    },
    "compare_screenshots": {
      "description": "Compare two screenshots and return similarity score",
      "parameters": ["image1_path", "image2_path"],
      "code": [
        "image1_path = params.get('image1_path')",
        "image2_path = params.get('image2_path')",
        "if not all(os.path.exists(p) for p in [image1_path, image2_path]):",
        "    result = {'success': False, 'error': 'One or both image files not found'}",
        "    return result",
        "img1 = cv2.imread(image1_path)",
        "img2 = cv2.imread(image2_path)",
        "if img1 is None or img2 is None:",
        "    result = {'success': False, 'error': 'Could not load one or both images'}",
        "    return result",
        "if img1.shape != img2.shape:",
        "    img2 = cv2.resize(img2, (img1.shape[1], img1.shape[0]))",
        "gray1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)",
        "gray2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)",
        "score = cv2.matchTemplate(gray1, gray2, cv2.TM_CCOEFF_NORMED)[0][0]",
        "result = {",
        "    'success': True,",
        "    'similarity_score': float(score),",
        "    'percentage': float(score * 100),",
        "    'are_similar': score > 0.8",
        "}",
        "return result"
      ]
    },
    "extract_text_from_screen": {
      "description": "Extract text from screen region using OCR",
      "parameters": ["x?", "y?", "width?", "height?", "language?=eng"],
      "code": [
        "try:",
        "    import pytesseract",
        "except ImportError:",
        "    result = {'success': False, 'error': 'pytesseract not installed'}",
        "    return result",
        "x = params.get('x')",
        "y = params.get('y')",
        "width = params.get('width')",
        "height = params.get('height')",
        "language = params.get('language', 'eng')",
        "if all(v is not None for v in [x, y, width, height]):",
        "    screenshot = pyautogui.screenshot(region=(x, y, width, height))",
        "else:",
        "    screenshot = pyautogui.screenshot()",
        "text = pytesseract.image_to_string(screenshot, lang=language)",
        "result = {",
        "    'success': True,",
        "    'text': text.strip(),",
        "    'region': {'x': x, 'y': y, 'width': width, 'height': height} if x is not None else None",
        "}",
        "return result"
      ]
    }
  }
}