{
  "package": "playwright-python",
  "import_name": "playwright",
  "import_type": "python",
  "description": "Browser automation and web scraping with Playwright",
  "capabilities": ["browser_automation", "web_scraping", "testing"],
  "setup": [
    "from playwright.async_api import async_playwright",
    "import asyncio",
    "import json",
    "browser_context = None",
    "pages = {}"
  ],
  "cleanup": [
    "if browser_context:",
    "    await browser_context.close()"
  ],
  "methods": {
    "launch_browser": {
      "description": "Launch a browser instance",
      "parameters": ["browser_type?=chromium", "headless?=True", "viewport?"],
      "code": [
        "browser_type = params.get('browser_type', 'chromium')",
        "headless = params.get('headless', True)",
        "viewport = params.get('viewport', {'width': 1280, 'height': 720})",
        "try:",
        "    global browser_context",
        "    if browser_context:",
        "        await browser_context.close()",
        "    playwright = await async_playwright().start()",
        "    if browser_type == 'chromium':",
        "        browser = await playwright.chromium.launch(headless=headless)",
        "    elif browser_type == 'firefox':",
        "        browser = await playwright.firefox.launch(headless=headless)",
        "    elif browser_type == 'webkit':",
        "        browser = await playwright.webkit.launch(headless=headless)",
        "    else:",
        "        browser = await playwright.chromium.launch(headless=headless)",
        "    browser_context = await browser.new_context(viewport=viewport)",
        "    result = {",
        "        'success': True,",
        "        'browser_type': browser_type,",
        "        'headless': headless,",
        "        'viewport': viewport,",
        "        'message': f'{browser_type} browser launched successfully'",
        "    }",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e)}",
        "return result"
      ]
    },
    "new_page": {
      "description": "Create a new browser page",
      "parameters": ["page_id?=default"],
      "code": [
        "page_id = params.get('page_id', 'default')",
        "try:",
        "    if not browser_context:",
        "        result = {'success': False, 'error': 'Browser not launched. Call launch_browser first.'}",
        "        return result",
        "    page = await browser_context.new_page()",
        "    pages[page_id] = page",
        "    result = {",
        "        'success': True,",
        "        'page_id': page_id,",
        "        'url': page.url,",
        "        'message': f'New page created with ID: {page_id}'",
        "    }",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e), 'page_id': page_id}",
        "return result"
      ]
    },
    "navigate_to": {
      "description": "Navigate to a URL",
      "parameters": ["url", "page_id?=default", "wait_until?=load"],
      "code": [
        "url = params.get('url')",
        "page_id = params.get('page_id', 'default')",
        "wait_until = params.get('wait_until', 'load')",
        "try:",
        "    if page_id not in pages:",
        "        result = {'success': False, 'error': f'Page {page_id} not found. Create page first.'}",
        "        return result",
        "    page = pages[page_id]",
        "    await page.goto(url, wait_until=wait_until)",
        "    result = {",
        "        'success': True,",
        "        'page_id': page_id,",
        "        'url': page.url,",
        "        'title': await page.title(),",
        "        'message': f'Navigated to {url}'",
        "    }",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e), 'url': url}",
        "return result"
      ]
    },
    "click_element": {
      "description": "Click an element on the page",
      "parameters": ["selector", "page_id?=default", "timeout?=30000"],
      "code": [
        "selector = params.get('selector')",
        "page_id = params.get('page_id', 'default')",
        "timeout = params.get('timeout', 30000)",
        "try:",
        "    if page_id not in pages:",
        "        result = {'success': False, 'error': f'Page {page_id} not found'}",
        "        return result",
        "    page = pages[page_id]",
        "    await page.click(selector, timeout=timeout)",
        "    result = {",
        "        'success': True,",
        "        'page_id': page_id,",
        "        'selector': selector,",
        "        'message': f'Clicked element: {selector}'",
        "    }",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e), 'selector': selector}",
        "return result"
      ]
    },
    "type_in_element": {
      "description": "Type text into an element",
      "parameters": ["selector", "text", "page_id?=default"],
      "code": [
        "selector = params.get('selector')",
        "text = params.get('text')",
        "page_id = params.get('page_id', 'default')",
        "try:",
        "    if page_id not in pages:",
        "        result = {'success': False, 'error': f'Page {page_id} not found'}",
        "        return result",
        "    page = pages[page_id]",
        "    await page.type(selector, text)",
        "    result = {",
        "        'success': True,",
        "        'page_id': page_id,",
        "        'selector': selector,",
        "        'text': text,",
        "        'message': f'Typed text into {selector}'",
        "    }",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e), 'selector': selector}",
        "return result"
      ]
    },
    "fill_element": {
      "description": "Fill an element with text (clears first)",
      "parameters": ["selector", "value", "page_id?=default"],
      "code": [
        "selector = params.get('selector')",
        "value = params.get('value')",
        "page_id = params.get('page_id', 'default')",
        "try:",
        "    if page_id not in pages:",
        "        result = {'success': False, 'error': f'Page {page_id} not found'}",
        "        return result",
        "    page = pages[page_id]",
        "    await page.fill(selector, value)",
        "    result = {",
        "        'success': True,",
        "        'page_id': page_id,",
        "        'selector': selector,",
        "        'value': value,",
        "        'message': f'Filled {selector} with value'",
        "    }",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e), 'selector': selector}",
        "return result"
      ]
    },
    "get_element_text": {
      "description": "Get text content of an element",
      "parameters": ["selector", "page_id?=default"],
      "code": [
        "selector = params.get('selector')",
        "page_id = params.get('page_id', 'default')",
        "try:",
        "    if page_id not in pages:",
        "        result = {'success': False, 'error': f'Page {page_id} not found'}",
        "        return result",
        "    page = pages[page_id]",
        "    element = await page.query_selector(selector)",
        "    if element:",
        "        text = await element.text_content()",
        "        result = {",
        "            'success': True,",
        "            'page_id': page_id,",
        "            'selector': selector,",
        "            'text': text",
        "        }",
        "    else:",
        "        result = {'success': False, 'error': f'Element not found: {selector}'}",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e), 'selector': selector}",
        "return result"
      ]
    },
    "execute_javascript": {
      "description": "Execute JavaScript on the page",
      "parameters": ["script", "page_id?=default"],
      "code": [
        "script = params.get('script')",
        "page_id = params.get('page_id', 'default')",
        "try:",
        "    if page_id not in pages:",
        "        result = {'success': False, 'error': f'Page {page_id} not found'}",
        "        return result",
        "    page = pages[page_id]",
        "    js_result = await page.evaluate(script)",
        "    result = {",
        "        'success': True,",
        "        'page_id': page_id,",
        "        'script': script,",
        "        'result': js_result",
        "        'message': 'JavaScript executed successfully'",
        "    }",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e), 'script': script}",
        "return result"
      ]
    },
    "screenshot_page": {
      "description": "Take a screenshot of the page",
      "parameters": ["page_id?=default", "path?", "full_page?=False"],
      "code": [
        "page_id = params.get('page_id', 'default')",
        "path = params.get('path')",
        "full_page = params.get('full_page', False)",
        "try:",
        "    if page_id not in pages:",
        "        result = {'success': False, 'error': f'Page {page_id} not found'}",
        "        return result",
        "    page = pages[page_id]",
        "    if path:",
        "        await page.screenshot(path=path, full_page=full_page)",
        "        result = {",
        "            'success': True,",
        "            'page_id': page_id,",
        "            'path': path,",
        "            'full_page': full_page,",
        "            'message': f'Screenshot saved to {path}'",
        "        }",
        "    else:",
        "        screenshot_bytes = await page.screenshot(full_page=full_page)",
        "        import base64",
        "        screenshot_b64 = base64.b64encode(screenshot_bytes).decode()",
        "        result = {",
        "            'success': True,",
        "            'page_id': page_id,",
        "            'screenshot_base64': screenshot_b64,",
        "            'full_page': full_page,",
        "            'message': 'Screenshot captured as base64'",
        "        }",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e)}",
        "return result"
      ]
    },
    "wait_for_element": {
      "description": "Wait for an element to appear",
      "parameters": ["selector", "page_id?=default", "timeout?=30000"],
      "code": [
        "selector = params.get('selector')",
        "page_id = params.get('page_id', 'default')",
        "timeout = params.get('timeout', 30000)",
        "try:",
        "    if page_id not in pages:",
        "        result = {'success': False, 'error': f'Page {page_id} not found'}",
        "        return result",
        "    page = pages[page_id]",
        "    await page.wait_for_selector(selector, timeout=timeout)",
        "    result = {",
        "        'success': True,",
        "        'page_id': page_id,",
        "        'selector': selector,",
        "        'message': f'Element appeared: {selector}'",
        "    }",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e), 'selector': selector}",
        "return result"
      ]
    },
    "get_page_content": {
      "description": "Get the HTML content of the page",
      "parameters": ["page_id?=default"],
      "code": [
        "page_id = params.get('page_id', 'default')",
        "try:",
        "    if page_id not in pages:",
        "        result = {'success': False, 'error': f'Page {page_id} not found'}",
        "        return result",
        "    page = pages[page_id]",
        "    content = await page.content()",
        "    result = {",
        "        'success': True,",
        "        'page_id': page_id,",
        "        'content': content,",
        "        'length': len(content)",
        "    }",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e)}",
        "return result"
      ]
    },
    "close_page": {
      "description": "Close a specific page",
      "parameters": ["page_id?=default"],
      "code": [
        "page_id = params.get('page_id', 'default')",
        "try:",
        "    if page_id not in pages:",
        "        result = {'success': False, 'error': f'Page {page_id} not found'}",
        "        return result",
        "    page = pages[page_id]",
        "    await page.close()",
        "    del pages[page_id]",
        "    result = {",
        "        'success': True,",
        "        'page_id': page_id,",
        "        'message': f'Page {page_id} closed successfully'",
        "    }",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e), 'page_id': page_id}",
        "return result"
      ]
    }
  }
}