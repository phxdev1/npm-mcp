{
  "package": "elevenlabs",
  "import_type": "python",
  "description": "High-quality text-to-speech using ElevenLabs API",
  "capabilities": ["audio", "voice_synthesis", "natural_speech"],
  "setup": [
    "import requests",
    "import json", 
    "import os",
    "import io",
    "AUDIO_PLAYBACK = False",
    "try: from dotenv import load_dotenv; load_dotenv()\nexcept: pass",
    "try: import pygame; pygame.mixer.pre_init(frequency=44100, size=-16, channels=2, buffer=512); pygame.mixer.init(); AUDIO_PLAYBACK = True\nexcept: pass",
    "ELEVENLABS_API_KEY = os.environ.get('ELEVENLABS_API_KEY')",
    "ELEVENLABS_BASE_URL = 'https://api.elevenlabs.io/v1'"
  ],
  "methods": {
    "speak_text": {
      "description": "Convert text to high-quality speech and play it",
      "parameters": ["text", "voice_id?=pNInz6obpgDQGcFmaJgB", "stability?=0.5", "similarity_boost?=0.5"],
      "code": [
        "text = params.get('text')",
        "voice_id = params.get('voice_id', 'pNInz6obpgDQGcFmaJgB')",
        "stability = params.get('stability', 0.5)",
        "similarity_boost = params.get('similarity_boost', 0.5)",
        "if not ELEVENLABS_API_KEY:",
        "    result = {'success': False, 'error': 'ELEVENLABS_API_KEY environment variable not set'}",
        "    return result",
        "try:",
        "    url = f'{ELEVENLABS_BASE_URL}/text-to-speech/{voice_id}'",
        "    headers = {",
        "        'Accept': 'audio/mpeg',",
        "        'Content-Type': 'application/json',",
        "        'xi-api-key': ELEVENLABS_API_KEY",
        "    }",
        "    data = {",
        "        'text': text,",
        "        'model_id': 'eleven_monolingual_v1',",
        "        'voice_settings': {",
        "            'stability': stability,",
        "            'similarity_boost': similarity_boost",
        "        }",
        "    }",
        "    response = requests.post(url, json=data, headers=headers)",
        "    if response.status_code == 200:",
        "        if AUDIO_PLAYBACK:",
        "            audio_data = io.BytesIO(response.content)",
        "            pygame.mixer.music.load(audio_data)",
        "            pygame.mixer.music.play()",
        "            while pygame.mixer.music.get_busy():",
        "                pygame.time.wait(100)",
        "            result = {",
        "                'success': True,",
        "                'text': text,",
        "                'voice_id': voice_id,",
        "                'message': 'Speech played successfully'",
        "            }",
        "        else:",
        "            result = {",
        "                'success': False,",
        "                'error': 'Audio playback not available (pygame not installed)'",
        "            }",
        "    else:",
        "        result = {",
        "            'success': False,",
        "            'error': f'ElevenLabs API error: {response.status_code} - {response.text}'",
        "        }",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e)}",
        "return result"
      ]
    },
    "save_speech_to_file": {
      "description": "Generate speech and save as audio file",
      "parameters": ["text", "filename", "voice_id?=pNInz6obpgDQGcFmaJgB", "stability?=0.5"],
      "code": [
        "text = params.get('text')",
        "filename = params.get('filename')",
        "voice_id = params.get('voice_id', 'pNInz6obpgDQGcFmaJgB')",
        "stability = params.get('stability', 0.5)",
        "if not ELEVENLABS_API_KEY:",
        "    result = {'success': False, 'error': 'ELEVENLABS_API_KEY environment variable not set'}",
        "    return result",
        "try:",
        "    url = f'{ELEVENLABS_BASE_URL}/text-to-speech/{voice_id}'",
        "    headers = {",
        "        'Accept': 'audio/mpeg',",
        "        'Content-Type': 'application/json',",
        "        'xi-api-key': ELEVENLABS_API_KEY",
        "    }",
        "    data = {",
        "        'text': text,",
        "        'model_id': 'eleven_monolingual_v1',",
        "        'voice_settings': {",
        "            'stability': stability,",
        "            'similarity_boost': 0.5",
        "        }",
        "    }",
        "    response = requests.post(url, json=data, headers=headers)",
        "    if response.status_code == 200:",
        "        with open(filename, 'wb') as f:",
        "            f.write(response.content)",
        "        result = {",
        "            'success': True,",
        "            'text': text,",
        "            'filename': filename,",
        "            'voice_id': voice_id,",
        "            'file_size': len(response.content)",
        "        }",
        "    else:",
        "        result = {",
        "            'success': False,",
        "            'error': f'ElevenLabs API error: {response.status_code} - {response.text}'",
        "        }",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e)}",
        "return result"
      ]
    },
    "get_voices": {
      "description": "Get available ElevenLabs voices",
      "parameters": [],
      "code": [
        "if not ELEVENLABS_API_KEY:",
        "    result = {'success': False, 'error': 'ELEVENLABS_API_KEY environment variable not set'}",
        "    return result",
        "try:",
        "    url = f'{ELEVENLABS_BASE_URL}/voices'",
        "    headers = {'xi-api-key': ELEVENLABS_API_KEY}",
        "    response = requests.get(url, headers=headers)",
        "    if response.status_code == 200:",
        "        voices_data = response.json()",
        "        voices = []",
        "        for voice in voices_data.get('voices', []):",
        "            voices.append({",
        "                'voice_id': voice['voice_id'],",
        "                'name': voice['name'],",
        "                'category': voice.get('category', 'unknown'),",
        "                'description': voice.get('description', ''),",
        "                'labels': voice.get('labels', {})",
        "            })",
        "        result = {",
        "            'success': True,",
        "            'voices': voices,",
        "            'count': len(voices)",
        "        }",
        "    else:",
        "        result = {",
        "            'success': False,",
        "            'error': f'ElevenLabs API error: {response.status_code} - {response.text}'",
        "        }",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e)}",
        "return result"
      ]
    },
    "announce": {
      "description": "Make an urgent announcement with appropriate voice settings",
      "parameters": ["message", "urgency?=normal", "voice_id?=pNInz6obpgDQGcFmaJgB"],
      "code": [
        "message = params.get('message')",
        "urgency = params.get('urgency', 'normal')",
        "voice_id = params.get('voice_id', 'pNInz6obpgDQGcFmaJgB')",
        "if not ELEVENLABS_API_KEY:",
        "    result = {'success': False, 'error': 'ELEVENLABS_API_KEY environment variable not set'}",
        "    return result",
        "try:",
        "    if urgency == 'high':",
        "        stability = 0.8",
        "        announcement = f'ATTENTION! {message}'",
        "    elif urgency == 'low':",
        "        stability = 0.3",
        "        announcement = f'Notice: {message}'",
        "    else:",
        "        stability = 0.5",
        "        announcement = message",
        "    url = f'{ELEVENLABS_BASE_URL}/text-to-speech/{voice_id}'",
        "    headers = {",
        "        'Accept': 'audio/mpeg',",
        "        'Content-Type': 'application/json',",
        "        'xi-api-key': ELEVENLABS_API_KEY",
        "    }",
        "    data = {",
        "        'text': announcement,",
        "        'model_id': 'eleven_monolingual_v1',",
        "        'voice_settings': {",
        "            'stability': stability,",
        "            'similarity_boost': 0.7",
        "        }",
        "    }",
        "    response = requests.post(url, json=data, headers=headers)",
        "    if response.status_code == 200:",
        "        if AUDIO_PLAYBACK:",
        "            audio_data = io.BytesIO(response.content)",
        "            pygame.mixer.music.load(audio_data)",
        "            pygame.mixer.music.play()",
        "            while pygame.mixer.music.get_busy():",
        "                pygame.time.wait(100)",
        "            result = {",
        "                'success': True,",
        "                'message': message,",
        "                'urgency': urgency,",
        "                'announcement': announcement",
        "            }",
        "        else:",
        "            result = {",
        "                'success': False,",
        "                'error': 'Audio playback not available (pygame not installed)'",
        "            }",
        "    else:",
        "        result = {",
        "            'success': False,",
        "            'error': f'ElevenLabs API error: {response.status_code} - {response.text}'",
        "        }",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e)}",
        "return result"
      ]
    },
    "clone_voice": {
      "description": "Clone a voice from audio sample",
      "parameters": ["audio_file_path", "voice_name", "description?"],
      "code": [
        "audio_file_path = params.get('audio_file_path')",
        "voice_name = params.get('voice_name')",
        "description = params.get('description', 'Custom cloned voice')",
        "if not ELEVENLABS_API_KEY:",
        "    result = {'success': False, 'error': 'ELEVENLABS_API_KEY environment variable not set'}",
        "    return result",
        "if not os.path.exists(audio_file_path):",
        "    result = {'success': False, 'error': f'Audio file not found: {audio_file_path}'}",
        "    return result",
        "try:",
        "    url = f'{ELEVENLABS_BASE_URL}/voices/add'",
        "    headers = {'xi-api-key': ELEVENLABS_API_KEY}",
        "    with open(audio_file_path, 'rb') as audio_file:",
        "        files = {'files': (os.path.basename(audio_file_path), audio_file, 'audio/mpeg')}",
        "        data = {",
        "            'name': voice_name,",
        "            'description': description",
        "        }",
        "        response = requests.post(url, headers=headers, files=files, data=data)",
        "    if response.status_code == 200:",
        "        voice_data = response.json()",
        "        result = {",
        "            'success': True,",
        "            'voice_id': voice_data['voice_id'],",
        "            'voice_name': voice_name,",
        "            'description': description",
        "        }",
        "    else:",
        "        result = {",
        "            'success': False,",
        "            'error': f'ElevenLabs API error: {response.status_code} - {response.text}'",
        "        }",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e)}",
        "return result"
      ]
    }
  }
}