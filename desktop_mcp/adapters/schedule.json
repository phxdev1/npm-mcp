{
  "package": "schedule",
  "import_type": "python",
  "description": "Task scheduling and time-based automation",
  "capabilities": ["scheduling", "automation", "time_based"],
  "setup": [
    "import schedule",
    "import time",
    "import threading",
    "global scheduled_jobs",
    "scheduled_jobs = {}"
  ],
  "methods": {
    "schedule_task": {
      "description": "Schedule a task to run at specific intervals",
      "parameters": ["task_id", "interval_type", "interval_value", "task_function", "task_params?"],
      "code": [
        "task_id = params.get('task_id')",
        "interval_type = params.get('interval_type')",
        "interval_value = params.get('interval_value')",
        "task_function = params.get('task_function')",
        "task_params = params.get('task_params', {})",
        "try:",
        "    def job_wrapper():",
        "        try:",
        "            print(f'Executing scheduled task: {task_id}')",
        "            result = globals().get(task_function, lambda: 'Function not found')(task_params)",
        "            print(f'Task {task_id} completed: {result}')",
        "        except Exception as e:",
        "            print(f'Error in scheduled task {task_id}: {e}')",
        "    if interval_type == 'seconds':",
        "        job = schedule.every(interval_value).seconds.do(job_wrapper)",
        "    elif interval_type == 'minutes':",
        "        job = schedule.every(interval_value).minutes.do(job_wrapper)",
        "    elif interval_type == 'hours':",
        "        job = schedule.every(interval_value).hours.do(job_wrapper)",
        "    elif interval_type == 'days':",
        "        job = schedule.every(interval_value).days.do(job_wrapper)",
        "    elif interval_type == 'weeks':",
        "        job = schedule.every(interval_value).weeks.do(job_wrapper)",
        "    else:",
        "        result = {'success': False, 'error': f'Invalid interval_type: {interval_type}'}",
        "        return result",
        "    scheduled_jobs[task_id] = job",
        "    result = {",
        "        'success': True,",
        "        'task_id': task_id,",
        "        'interval_type': interval_type,",
        "        'interval_value': interval_value,",
        "        'next_run': str(job.next_run) if hasattr(job, 'next_run') else 'Not scheduled',",
        "        'message': f'Task {task_id} scheduled to run every {interval_value} {interval_type}'",
        "    }",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e), 'task_id': task_id}",
        "return result"
      ]
    },
    "schedule_daily_task": {
      "description": "Schedule a task to run daily at specific time",
      "parameters": ["task_id", "time_str", "task_function", "task_params?"],
      "code": [
        "task_id = params.get('task_id')",
        "time_str = params.get('time_str')",
        "task_function = params.get('task_function')",
        "task_params = params.get('task_params', {})",
        "try:",
        "    def job_wrapper():",
        "        try:",
        "            print(f'Executing daily task: {task_id} at {time_str}')",
        "            result = globals().get(task_function, lambda: 'Function not found')(task_params)",
        "            print(f'Daily task {task_id} completed: {result}')",
        "        except Exception as e:",
        "            print(f'Error in daily task {task_id}: {e}')",
        "    job = schedule.every().day.at(time_str).do(job_wrapper)",
        "    scheduled_jobs[task_id] = job",
        "    result = {",
        "        'success': True,",
        "        'task_id': task_id,",
        "        'time_str': time_str,",
        "        'next_run': str(job.next_run) if hasattr(job, 'next_run') else 'Not scheduled',",
        "        'message': f'Task {task_id} scheduled daily at {time_str}'",
        "    }",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e), 'task_id': task_id}",
        "return result"
      ]
    },
    "cancel_task": {
      "description": "Cancel a scheduled task",
      "parameters": ["task_id"],
      "code": [
        "task_id = params.get('task_id')",
        "try:",
        "    if task_id in scheduled_jobs:",
        "        schedule.cancel_job(scheduled_jobs[task_id])",
        "        del scheduled_jobs[task_id]",
        "        result = {",
        "            'success': True,",
        "            'task_id': task_id,",
        "            'message': f'Task {task_id} cancelled successfully'",
        "        }",
        "    else:",
        "        result = {",
        "            'success': False,",
        "            'error': f'Task {task_id} not found',",
        "            'available_tasks': list(scheduled_jobs.keys())",
        "        }",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e), 'task_id': task_id}",
        "return result"
      ]
    },
    "list_scheduled_tasks": {
      "description": "List all scheduled tasks",
      "parameters": [],
      "code": [
        "try:",
        "    tasks = []",
        "    for task_id, job in scheduled_jobs.items():",
        "        tasks.append({",
        "            'task_id': task_id,",
        "            'next_run': str(job.next_run) if hasattr(job, 'next_run') else 'Not scheduled',",
        "            'interval': getattr(job, 'interval', 'Unknown'),",
        "            'unit': getattr(job, 'unit', 'Unknown')",
        "        })",
        "    result = {",
        "        'success': True,",
        "        'scheduled_tasks': tasks,",
        "        'task_count': len(tasks)",
        "    }",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e)}",
        "return result"
      ]
    },
    "run_pending_tasks": {
      "description": "Run all pending scheduled tasks",
      "parameters": [],
      "code": [
        "try:",
        "    pending_count = len([job for job in schedule.jobs if job.should_run])",
        "    schedule.run_pending()",
        "    result = {",
        "        'success': True,",
        "        'pending_tasks_run': pending_count,",
        "        'message': f'Executed {pending_count} pending tasks'",
        "    }",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e)}",
        "return result"
      ]
    },
    "start_scheduler": {
      "description": "Start the scheduler in background thread",
      "parameters": ["check_interval?=1"],
      "code": [
        "check_interval = params.get('check_interval', 1)",
        "try:",
        "    def run_scheduler():",
        "        while True:",
        "            schedule.run_pending()",
        "            time.sleep(check_interval)",
        "    if not hasattr(globals(), 'scheduler_thread') or not globals()['scheduler_thread'].is_alive():",
        "        globals()['scheduler_thread'] = threading.Thread(target=run_scheduler, daemon=True)",
        "        globals()['scheduler_thread'].start()",
        "        result = {",
        "            'success': True,",
        "            'check_interval': check_interval,",
        "            'message': 'Scheduler started in background thread'",
        "        }",
        "    else:",
        "        result = {",
        "            'success': True,",
        "            'message': 'Scheduler already running'",
        "        }",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e)}",
        "return result"
      ]
    },
    "schedule_notification": {
      "description": "Schedule a notification to be shown",
      "parameters": ["task_id", "message", "interval_type", "interval_value"],
      "code": [
        "task_id = params.get('task_id')",
        "message = params.get('message')",
        "interval_type = params.get('interval_type')",
        "interval_value = params.get('interval_value')",
        "try:",
        "    def show_notification():",
        "        try:",
        "            print(f'ðŸ”” SCHEDULED NOTIFICATION: {message}')",
        "            # Try to use system notifications if available",
        "            try:",
        "                import plyer",
        "                plyer.notification.notify(",
        "                    title='Scheduled Notification',",
        "                    message=message,",
        "                    timeout=10",
        "                )",
        "            except:",
        "                pass",
        "        except Exception as e:",
        "            print(f'Error showing notification: {e}')",
        "    if interval_type == 'seconds':",
        "        job = schedule.every(interval_value).seconds.do(show_notification)",
        "    elif interval_type == 'minutes':",
        "        job = schedule.every(interval_value).minutes.do(show_notification)",
        "    elif interval_type == 'hours':",
        "        job = schedule.every(interval_value).hours.do(show_notification)",
        "    elif interval_type == 'days':",
        "        job = schedule.every(interval_value).days.do(show_notification)",
        "    else:",
        "        result = {'success': False, 'error': f'Invalid interval_type: {interval_type}'}",
        "        return result",
        "    scheduled_jobs[task_id] = job",
        "    result = {",
        "        'success': True,",
        "        'task_id': task_id,",
        "        'message': message,",
        "        'interval': f'{interval_value} {interval_type}',",
        "        'notification': f'Notification scheduled every {interval_value} {interval_type}'",
        "    }",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e)}",
        "return result"
      ]
    },
    "clear_all_tasks": {
      "description": "Clear all scheduled tasks",
      "parameters": [],
      "code": [
        "try:",
        "    task_count = len(scheduled_jobs)",
        "    schedule.clear()",
        "    scheduled_jobs.clear()",
        "    result = {",
        "        'success': True,",
        "        'cleared_tasks': task_count,",
        "        'message': f'Cleared {task_count} scheduled tasks'",
        "    }",
        "except Exception as e:",
        "    result = {'success': False, 'error': str(e)}",
        "return result"
      ]
    }
  }
}