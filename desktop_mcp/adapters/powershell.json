{
  "package": "subprocess",
  "import_type": "python",
  "description": "PowerShell command execution for Windows automation",
  "capabilities": ["powershell", "windows_automation"],
  "setup": [
    "import subprocess",
    "import platform",
    "import json"
  ],
  "methods": {
    "run_powershell": {
      "description": "Execute a PowerShell command",
      "parameters": ["command", "timeout?=30", "execution_policy?=Bypass"],
      "code": [
        "if platform.system() != 'Windows':",
        "    response = {'success': False, 'error': 'PowerShell only available on Windows'}",
        "    return response",
        "command = params.get('command')",
        "timeout = params.get('timeout', 30)",
        "execution_policy = params.get('execution_policy', 'Bypass')",
        "ps_command = [",
        "    'powershell.exe',",
        "    '-ExecutionPolicy', execution_policy,",
        "    '-Command', command",
        "]",
        "try:",
        "    result = subprocess.run(",
        "        ps_command,",
        "        capture_output=True,",
        "        text=True,",
        "        timeout=timeout,",
        "        encoding='utf-8'",
        "    )",
        "    response = {",
        "        'success': result.returncode == 0,",
        "        'return_code': result.returncode,",
        "        'stdout': result.stdout,",
        "        'stderr': result.stderr,",
        "        'command': command",
        "    }",
        "except subprocess.TimeoutExpired:",
        "    response = {",
        "        'success': False,",
        "        'error': 'PowerShell command timed out',",
        "        'timeout': timeout,",
        "        'command': command",
        "    }",
        "except Exception as e:",
        "    response = {",
        "        'success': False,",
        "        'error': str(e),",
        "        'command': command",
        "    }",
        "return response"
      ]
    },
    "get_windows_services": {
      "description": "Get Windows services status",
      "parameters": ["service_name?"],
      "code": [
        "if platform.system() != 'Windows':",
        "    response = {'success': False, 'error': 'Windows services only available on Windows'}",
        "    return response",
        "service_name = params.get('service_name')",
        "if service_name:",
        "    command = f'Get-Service -Name \"{service_name}\" | ConvertTo-Json'",
        "else:",
        "    command = 'Get-Service | ConvertTo-Json'",
        "ps_command = ['powershell.exe', '-Command', command]",
        "try:",
        "    result = subprocess.run(ps_command, capture_output=True, text=True, timeout=30)",
        "    if result.returncode == 0:",
        "        services = json.loads(result.stdout)",
        "        response = {",
        "            'success': True,",
        "            'services': services if isinstance(services, list) else [services]",
        "        }",
        "    else:",
        "        response = {",
        "            'success': False,",
        "            'error': result.stderr,",
        "            'service_name': service_name",
        "        }",
        "except Exception as e:",
        "    response = {",
        "        'success': False,",
        "        'error': str(e),",
        "        'service_name': service_name",
        "    }",
        "return response"
      ]
    },
    "start_windows_service": {
      "description": "Start a Windows service",
      "parameters": ["service_name"],
      "code": [
        "if platform.system() != 'Windows':",
        "    response = {'success': False, 'error': 'Windows services only available on Windows'}",
        "    return response",
        "service_name = params.get('service_name')",
        "command = f'Start-Service -Name \"{service_name}\"'",
        "ps_command = ['powershell.exe', '-Command', command]",
        "try:",
        "    result = subprocess.run(ps_command, capture_output=True, text=True, timeout=30)",
        "    response = {",
        "        'success': result.returncode == 0,",
        "        'service_name': service_name,",
        "        'message': f'Service {service_name} start command executed',",
        "        'stderr': result.stderr if result.stderr else None",
        "    }",
        "except Exception as e:",
        "    response = {",
        "        'success': False,",
        "        'error': str(e),",
        "        'service_name': service_name",
        "    }",
        "return response"
      ]
    },
    "stop_windows_service": {
      "description": "Stop a Windows service",
      "parameters": ["service_name"],
      "code": [
        "if platform.system() != 'Windows':",
        "    response = {'success': False, 'error': 'Windows services only available on Windows'}",
        "    return response",
        "service_name = params.get('service_name')",
        "command = f'Stop-Service -Name \"{service_name}\" -Force'",
        "ps_command = ['powershell.exe', '-Command', command]",
        "try:",
        "    result = subprocess.run(ps_command, capture_output=True, text=True, timeout=30)",
        "    response = {",
        "        'success': result.returncode == 0,",
        "        'service_name': service_name,",
        "        'message': f'Service {service_name} stop command executed',",
        "        'stderr': result.stderr if result.stderr else None",
        "    }",
        "except Exception as e:",
        "    response = {",
        "        'success': False,",
        "        'error': str(e),",
        "        'service_name': service_name",
        "    }",
        "return response"
      ]
    },
    "get_installed_programs": {
      "description": "Get list of installed programs on Windows",
      "parameters": [],
      "code": [
        "if platform.system() != 'Windows':",
        "    response = {'success': False, 'error': 'Installed programs list only available on Windows'}",
        "    return response",
        "command = 'Get-WmiObject -Class Win32_Product | Select-Object Name, Version, Vendor | ConvertTo-Json'",
        "ps_command = ['powershell.exe', '-Command', command]",
        "try:",
        "    result = subprocess.run(ps_command, capture_output=True, text=True, timeout=60)",
        "    if result.returncode == 0 and result.stdout.strip():",
        "        programs = json.loads(result.stdout)",
        "        response = {",
        "            'success': True,",
        "            'programs': programs if isinstance(programs, list) else [programs],",
        "            'count': len(programs) if isinstance(programs, list) else 1",
        "        }",
        "    else:",
        "        response = {",
        "            'success': False,",
        "            'error': 'No programs found or command failed',",
        "            'stderr': result.stderr",
        "        }",
        "except Exception as e:",
        "    response = {",
        "        'success': False,",
        "        'error': str(e)",
        "    }",
        "return response"
      ]
    },
    "get_windows_event_log": {
      "description": "Get Windows event log entries",
      "parameters": ["log_name?=System", "max_events?=10"],
      "code": [
        "if platform.system() != 'Windows':",
        "    response = {'success': False, 'error': 'Windows event logs only available on Windows'}",
        "    return response",
        "log_name = params.get('log_name', 'System')",
        "max_events = params.get('max_events', 10)",
        "command = f'Get-EventLog -LogName \"{log_name}\" -Newest {max_events} | ConvertTo-Json'",
        "ps_command = ['powershell.exe', '-Command', command]",
        "try:",
        "    result = subprocess.run(ps_command, capture_output=True, text=True, timeout=30)",
        "    if result.returncode == 0:",
        "        events = json.loads(result.stdout)",
        "        response = {",
        "            'success': True,",
        "            'log_name': log_name,",
        "            'events': events if isinstance(events, list) else [events],",
        "            'count': len(events) if isinstance(events, list) else 1",
        "        }",
        "    else:",
        "        response = {",
        "            'success': False,",
        "            'error': result.stderr,",
        "            'log_name': log_name",
        "        }",
        "except Exception as e:",
        "    response = {",
        "        'success': False,",
        "        'error': str(e),",
        "        'log_name': log_name",
        "    }",
        "return response"
      ]
    },
    "get_system_info_windows": {
      "description": "Get detailed Windows system information",
      "parameters": [],
      "code": [
        "if platform.system() != 'Windows':",
        "    response = {'success': False, 'error': 'Windows system info only available on Windows'}",
        "    return response",
        "command = 'Get-ComputerInfo | ConvertTo-Json'",
        "ps_command = ['powershell.exe', '-Command', command]",
        "try:",
        "    result = subprocess.run(ps_command, capture_output=True, text=True, timeout=30)",
        "    if result.returncode == 0:",
        "        info = json.loads(result.stdout)",
        "        response = {",
        "            'success': True,",
        "            'system_info': info",
        "        }",
        "    else:",
        "        response = {",
        "            'success': False,",
        "            'error': result.stderr",
        "        }",
        "except Exception as e:",
        "    response = {",
        "        'success': False,",
        "        'error': str(e)",
        "    }",
        "return response"
      ]
    },
    "run_as_admin": {
      "description": "Run a PowerShell command with administrator privileges",
      "parameters": ["command"],
      "code": [
        "if platform.system() != 'Windows':",
        "    response = {'success': False, 'error': 'Administrator elevation only available on Windows'}",
        "    return response",
        "command = params.get('command')",
        "ps_command = [",
        "    'powershell.exe',",
        "    '-Command',",
        "    f'Start-Process powershell -ArgumentList \"-Command {command}\" -Verb RunAs -Wait'",
        "]",
        "try:",
        "    result = subprocess.run(ps_command, capture_output=True, text=True, timeout=60)",
        "    response = {",
        "        'success': result.returncode == 0,",
        "        'return_code': result.returncode,",
        "        'stdout': result.stdout,",
        "        'stderr': result.stderr,",
        "        'command': command,",
        "        'message': 'Command executed with administrator privileges'",
        "    }",
        "except Exception as e:",
        "    response = {",
        "        'success': False,",
        "        'error': str(e),",
        "        'command': command",
        "    }",
        "return response"
      ]
    }
  }
}