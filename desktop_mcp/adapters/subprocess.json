{
  "package": "subprocess",
  "import_type": "python",
  "description": "Command line execution and process management",
  "capabilities": ["command_execution", "process_management"],
  "setup": [
    "import subprocess",
    "import os", 
    "import sys",
    "import shlex",
    "import platform"
  ],
  "methods": {
    "run_command": {
      "description": "Execute a command and return output",
      "parameters": ["command", "shell?=false", "timeout?=30", "capture_output?=true", "working_directory?"],
      "code": [
        "command = params.get('command')",
        "shell = params.get('shell', False)",
        "timeout = params.get('timeout', 30)",
        "capture_output = params.get('capture_output', True)",
        "working_directory = params.get('working_directory')",
        "if isinstance(command, str) and not shell:",
        "    command = shlex.split(command)",
        "try:",
        "    result = subprocess.run(",
        "        command,",
        "        shell=shell,",
        "        capture_output=capture_output,",
        "        text=True,",
        "        timeout=timeout,",
        "        cwd=working_directory",
        "    )",
        "    response = {",
        "        'success': result.returncode == 0,",
        "        'return_code': result.returncode,",
        "        'stdout': result.stdout if capture_output else '',",
        "        'stderr': result.stderr if capture_output else '',",
        "        'command': command",
        "    }",
        "except subprocess.TimeoutExpired:",
        "    response = {",
        "        'success': False,",
        "        'error': 'Command timed out',",
        "        'timeout': timeout,",
        "        'command': command",
        "    }",
        "except FileNotFoundError:",
        "    response = {",
        "        'success': False,",
        "        'error': 'Command not found',",
        "        'command': command",
        "    }",
        "except Exception as e:",
        "    response = {",
        "        'success': False,",
        "        'error': str(e),",
        "        'command': command",
        "    }",
        "return response"
      ]
    },
    "run_shell_command": {
      "description": "Execute a shell command with shell features",
      "parameters": ["command", "timeout?=30", "working_directory?"],
      "code": [
        "command = params.get('command')",
        "timeout = params.get('timeout', 30)",
        "working_directory = params.get('working_directory')",
        "try:",
        "    result = subprocess.run(",
        "        command,",
        "        shell=True,",
        "        capture_output=True,",
        "        text=True,",
        "        timeout=timeout,",
        "        cwd=working_directory",
        "    )",
        "    response = {",
        "        'success': result.returncode == 0,",
        "        'return_code': result.returncode,",
        "        'stdout': result.stdout,",
        "        'stderr': result.stderr,",
        "        'command': command",
        "    }",
        "except subprocess.TimeoutExpired:",
        "    response = {",
        "        'success': False,",
        "        'error': 'Command timed out',",
        "        'timeout': timeout,",
        "        'command': command",
        "    }",
        "except Exception as e:",
        "    response = {",
        "        'success': False,",
        "        'error': str(e),",
        "        'command': command",
        "    }",
        "return response"
      ]
    },
    "start_background_process": {
      "description": "Start a process in the background",
      "parameters": ["command", "shell?=false", "working_directory?"],
      "code": [
        "command = params.get('command')",
        "shell = params.get('shell', False)",
        "working_directory = params.get('working_directory')",
        "if isinstance(command, str) and not shell:",
        "    command = shlex.split(command)",
        "try:",
        "    process = subprocess.Popen(",
        "        command,",
        "        shell=shell,",
        "        stdout=subprocess.PIPE,",
        "        stderr=subprocess.PIPE,",
        "        text=True,",
        "        cwd=working_directory",
        "    )",
        "    response = {",
        "        'success': True,",
        "        'pid': process.pid,",
        "        'command': command,",
        "        'message': f'Process started with PID {process.pid}'",
        "    }",
        "except Exception as e:",
        "    response = {",
        "        'success': False,",
        "        'error': str(e),",
        "        'command': command",
        "    }",
        "return response"
      ]
    },
    "get_command_output": {
      "description": "Get output from a command without waiting for completion",
      "parameters": ["command", "shell?=false", "timeout?=5"],
      "code": [
        "command = params.get('command')",
        "shell = params.get('shell', False)",
        "timeout = params.get('timeout', 5)",
        "if isinstance(command, str) and not shell:",
        "    command = shlex.split(command)",
        "try:",
        "    process = subprocess.Popen(",
        "        command,",
        "        shell=shell,",
        "        stdout=subprocess.PIPE,",
        "        stderr=subprocess.PIPE,",
        "        text=True",
        "    )",
        "    stdout, stderr = process.communicate(timeout=timeout)",
        "    response = {",
        "        'success': process.returncode == 0,",
        "        'return_code': process.returncode,",
        "        'stdout': stdout,",
        "        'stderr': stderr,",
        "        'pid': process.pid,",
        "        'command': command",
        "    }",
        "except subprocess.TimeoutExpired:",
        "    process.kill()",
        "    stdout, stderr = process.communicate()",
        "    response = {",
        "        'success': False,",
        "        'error': 'Command timed out and was killed',",
        "        'stdout': stdout,",
        "        'stderr': stderr,",
        "        'timeout': timeout,",
        "        'command': command",
        "    }",
        "except Exception as e:",
        "    response = {",
        "        'success': False,",
        "        'error': str(e),",
        "        'command': command",
        "    }",
        "return response"
      ]
    },
    "check_command_exists": {
      "description": "Check if a command/program is available",
      "parameters": ["command"],
      "code": [
        "command = params.get('command')",
        "try:",
        "    if platform.system() == 'Windows':",
        "        result = subprocess.run(['where', command], capture_output=True, text=True)",
        "    else:",
        "        result = subprocess.run(['which', command], capture_output=True, text=True)",
        "    exists = result.returncode == 0",
        "    response = {",
        "        'exists': exists,",
        "        'command': command,",
        "        'path': result.stdout.strip() if exists else None",
        "    }",
        "except Exception as e:",
        "    response = {",
        "        'exists': False,",
        "        'command': command,",
        "        'error': str(e)",
        "    }",
        "return response"
      ]
    },
    "get_environment_variable": {
      "description": "Get environment variable value",
      "parameters": ["variable_name", "default_value?"],
      "code": [
        "variable_name = params.get('variable_name')",
        "default_value = params.get('default_value')",
        "value = os.environ.get(variable_name, default_value)",
        "response = {",
        "    'variable_name': variable_name,",
        "    'value': value,",
        "    'exists': variable_name in os.environ",
        "}",
        "return response"
      ]
    },
    "set_environment_variable": {
      "description": "Set environment variable for current session",
      "parameters": ["variable_name", "value"],
      "code": [
        "variable_name = params.get('variable_name')",
        "value = params.get('value')",
        "os.environ[variable_name] = str(value)",
        "response = {",
        "    'success': True,",
        "    'variable_name': variable_name,",
        "    'value': value,",
        "    'message': f'Environment variable {variable_name} set to {value}'",
        "}",
        "return response"
      ]
    },
    "get_current_directory": {
      "description": "Get current working directory",
      "parameters": [],
      "code": [
        "current_dir = os.getcwd()",
        "response = {",
        "    'current_directory': current_dir,",
        "    'absolute_path': os.path.abspath(current_dir)",
        "}",
        "return response"
      ]
    },
    "change_directory": {
      "description": "Change current working directory",
      "parameters": ["path"],
      "code": [
        "path = params.get('path')",
        "try:",
        "    old_dir = os.getcwd()",
        "    os.chdir(path)",
        "    new_dir = os.getcwd()",
        "    response = {",
        "        'success': True,",
        "        'old_directory': old_dir,",
        "        'new_directory': new_dir,",
        "        'message': f'Changed directory from {old_dir} to {new_dir}'",
        "    }",
        "except FileNotFoundError:",
        "    response = {",
        "        'success': False,",
        "        'error': f'Directory not found: {path}',",
        "        'path': path",
        "    }",
        "except PermissionError:",
        "    response = {",
        "        'success': False,",
        "        'error': f'Permission denied: {path}',",
        "        'path': path",
        "    }",
        "except Exception as e:",
        "    response = {",
        "        'success': False,",
        "        'error': str(e),",
        "        'path': path",
        "    }",
        "return response"
      ]
    },
    "run_python_script": {
      "description": "Execute a Python script",
      "parameters": ["script_path", "arguments?", "timeout?=60"],
      "code": [
        "script_path = params.get('script_path')",
        "arguments = params.get('arguments', [])",
        "timeout = params.get('timeout', 60)",
        "if not os.path.exists(script_path):",
        "    response = {",
        "        'success': False,",
        "        'error': f'Script not found: {script_path}',",
        "        'script_path': script_path",
        "    }",
        "    return response",
        "command = [sys.executable, script_path] + arguments",
        "try:",
        "    result = subprocess.run(",
        "        command,",
        "        capture_output=True,",
        "        text=True,",
        "        timeout=timeout",
        "    )",
        "    response = {",
        "        'success': result.returncode == 0,",
        "        'return_code': result.returncode,",
        "        'stdout': result.stdout,",
        "        'stderr': result.stderr,",
        "        'script_path': script_path,",
        "        'arguments': arguments",
        "    }",
        "except subprocess.TimeoutExpired:",
        "    response = {",
        "        'success': False,",
        "        'error': 'Script execution timed out',",
        "        'timeout': timeout,",
        "        'script_path': script_path",
        "    }",
        "except Exception as e:",
        "    response = {",
        "        'success': False,",
        "        'error': str(e),",
        "        'script_path': script_path",
        "    }",
        "return response"
      ]
    },
    "run_batch_commands": {
      "description": "Run multiple commands in sequence",
      "parameters": ["commands", "stop_on_error?=true", "shell?=false"],
      "code": [
        "commands = params.get('commands', [])",
        "stop_on_error = params.get('stop_on_error', True)",
        "shell = params.get('shell', False)",
        "results = []",
        "overall_success = True",
        "for i, command in enumerate(commands):",
        "    try:",
        "        if isinstance(command, str) and not shell:",
        "            cmd = shlex.split(command)",
        "        else:",
        "            cmd = command",
        "        result = subprocess.run(",
        "            cmd,",
        "            shell=shell,",
        "            capture_output=True,",
        "            text=True,",
        "            timeout=30",
        "        )",
        "        cmd_result = {",
        "            'command': command,",
        "            'index': i,",
        "            'success': result.returncode == 0,",
        "            'return_code': result.returncode,",
        "            'stdout': result.stdout,",
        "            'stderr': result.stderr",
        "        }",
        "        results.append(cmd_result)",
        "        if result.returncode != 0:",
        "            overall_success = False",
        "            if stop_on_error:",
        "                break",
        "    except Exception as e:",
        "        cmd_result = {",
        "            'command': command,",
        "            'index': i,",
        "            'success': False,",
        "            'error': str(e)",
        "        }",
        "        results.append(cmd_result)",
        "        overall_success = False",
        "        if stop_on_error:",
        "            break",
        "response = {",
        "    'overall_success': overall_success,",
        "    'commands_executed': len(results),",
        "    'total_commands': len(commands),",
        "    'results': results",
        "}",
        "return response"
      ]
    }
  }
}